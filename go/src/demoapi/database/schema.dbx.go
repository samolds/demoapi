// AUTOGENERATED BY gopkg.in/spacemonkeygo/dbx.v1
// DO NOT EDIT.

package database

import (
	"bytes"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"
	"unicode"

	"github.com/lib/pq"

	"github.com/mattn/go-sqlite3"
	"math/rand"
)

// Prevent conditional imports from causing build failures
var _ = strconv.Itoa
var _ = strings.LastIndex
var _ = fmt.Sprint
var _ sync.Mutex

var (
	WrapErr = func(err *Error) error { return err }
	Logger  func(format string, args ...interface{})

	errTooManyRows       = errors.New("too many rows")
	errUnsupportedDriver = errors.New("unsupported driver")
	errEmptyUpdate       = errors.New("empty update")
)

func logError(format string, args ...interface{}) {
	if Logger != nil {
		Logger(format, args...)
	}
}

type ErrorCode int

const (
	ErrorCode_Unknown ErrorCode = iota
	ErrorCode_UnsupportedDriver
	ErrorCode_NoRows
	ErrorCode_TxDone
	ErrorCode_TooManyRows
	ErrorCode_ConstraintViolation
	ErrorCode_EmptyUpdate
)

type Error struct {
	Err         error
	Code        ErrorCode
	Driver      string
	Constraint  string
	QuerySuffix string
}

func (e *Error) Error() string {
	return e.Err.Error()
}

func wrapErr(e *Error) error {
	if WrapErr == nil {
		return e
	}
	return WrapErr(e)
}

func makeErr(err error) error {
	if err == nil {
		return nil
	}
	e := &Error{Err: err}
	switch err {
	case sql.ErrNoRows:
		e.Code = ErrorCode_NoRows
	case sql.ErrTxDone:
		e.Code = ErrorCode_TxDone
	}
	return wrapErr(e)
}

func unsupportedDriver(driver string) error {
	return wrapErr(&Error{
		Err:    errUnsupportedDriver,
		Code:   ErrorCode_UnsupportedDriver,
		Driver: driver,
	})
}

func emptyUpdate() error {
	return wrapErr(&Error{
		Err:  errEmptyUpdate,
		Code: ErrorCode_EmptyUpdate,
	})
}

func tooManyRows(query_suffix string) error {
	return wrapErr(&Error{
		Err:         errTooManyRows,
		Code:        ErrorCode_TooManyRows,
		QuerySuffix: query_suffix,
	})
}

func constraintViolation(err error, constraint string) error {
	return wrapErr(&Error{
		Err:        err,
		Code:       ErrorCode_ConstraintViolation,
		Constraint: constraint,
	})
}

type driver interface {
	Exec(query string, args ...interface{}) (sql.Result, error)
	Query(query string, args ...interface{}) (*sql.Rows, error)
	QueryRow(query string, args ...interface{}) *sql.Row
}

var (
	notAPointer     = errors.New("destination not a pointer")
	lossyConversion = errors.New("lossy conversion")
)

type DB struct {
	*sql.DB
	dbMethods

	Hooks struct {
		Now func() time.Time
	}
}

func Open(driver, source string) (db *DB, err error) {
	var sql_db *sql.DB
	switch driver {
	case "postgres":
		sql_db, err = openpostgres(source)
	case "sqlite3":
		sql_db, err = opensqlite3(source)
	default:
		return nil, unsupportedDriver(driver)
	}
	if err != nil {
		return nil, makeErr(err)
	}
	defer func(sql_db *sql.DB) {
		if err != nil {
			sql_db.Close()
		}
	}(sql_db)

	if err := sql_db.Ping(); err != nil {
		return nil, makeErr(err)
	}

	db = &DB{
		DB: sql_db,
	}
	db.Hooks.Now = time.Now

	switch driver {
	case "postgres":
		db.dbMethods = newpostgres(db)
	case "sqlite3":
		db.dbMethods = newsqlite3(db)
	default:
		return nil, unsupportedDriver(driver)
	}

	return db, nil
}

func (obj *DB) Close() (err error) {
	return obj.makeErr(obj.DB.Close())
}

func (obj *DB) Open(ctx context.Context) (*Tx, error) {
	tx, err := obj.DB.Begin()
	if err != nil {
		return nil, obj.makeErr(err)
	}

	return &Tx{
		Tx:        tx,
		txMethods: obj.wrapTx(tx),
	}, nil
}

func (obj *DB) NewRx() *Rx {
	return &Rx{db: obj}
}

func DeleteAll(ctx context.Context, db *DB) (int64, error) {
	tx, err := db.Open(ctx)
	if err != nil {
		return 0, err
	}
	defer func() {
		if err == nil {
			err = db.makeErr(tx.Commit())
			return
		}

		if err_rollback := tx.Rollback(); err_rollback != nil {
			logError("delete-all: rollback failed: %v", db.makeErr(err_rollback))
		}
	}()
	return tx.deleteAll(ctx)
}

type Tx struct {
	Tx *sql.Tx
	txMethods
}

type dialectTx struct {
	tx *sql.Tx
}

func (tx *dialectTx) Commit() (err error) {
	return makeErr(tx.tx.Commit())
}

func (tx *dialectTx) Rollback() (err error) {
	return makeErr(tx.tx.Rollback())
}

type postgresImpl struct {
	db      *DB
	dialect __sqlbundle_postgres
	driver  driver
}

func (obj *postgresImpl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *postgresImpl) logStmt(stmt string, args ...interface{}) {
	postgresLogStmt(stmt, args...)
}

func (obj *postgresImpl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type postgresDB struct {
	db *DB
	*postgresImpl
}

func newpostgres(db *DB) *postgresDB {
	return &postgresDB{
		db: db,
		postgresImpl: &postgresImpl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *postgresDB) Schema() string {
	return `CREATE TABLE groups (
	pk bigserial NOT NULL,
	uuid text NOT NULL,
	created timestamp NOT NULL,
	name text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( uuid ),
	UNIQUE ( name )
);
CREATE TABLE users (
	pk bigserial NOT NULL,
	uuid text NOT NULL,
	created timestamp NOT NULL,
	id text NOT NULL,
	first_name text NOT NULL,
	last_name text NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( uuid ),
	UNIQUE ( id )
);
CREATE TABLE memberships (
	pk bigserial NOT NULL,
	created timestamp NOT NULL,
	user_pk bigint NOT NULL REFERENCES users( pk ) ON DELETE CASCADE,
	group_pk bigint NOT NULL REFERENCES groups( pk ) ON DELETE CASCADE,
	PRIMARY KEY ( pk ),
	UNIQUE ( user_pk, group_pk )
);`
}

func (obj *postgresDB) wrapTx(tx *sql.Tx) txMethods {
	return &postgresTx{
		dialectTx: dialectTx{tx: tx},
		postgresImpl: &postgresImpl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type postgresTx struct {
	dialectTx
	*postgresImpl
}

func postgresLogStmt(stmt string, args ...interface{}) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type sqlite3Impl struct {
	db      *DB
	dialect __sqlbundle_sqlite3
	driver  driver
}

func (obj *sqlite3Impl) Rebind(s string) string {
	return obj.dialect.Rebind(s)
}

func (obj *sqlite3Impl) logStmt(stmt string, args ...interface{}) {
	sqlite3LogStmt(stmt, args...)
}

func (obj *sqlite3Impl) makeErr(err error) error {
	constraint, ok := obj.isConstraintError(err)
	if ok {
		return constraintViolation(err, constraint)
	}
	return makeErr(err)
}

type sqlite3DB struct {
	db *DB
	*sqlite3Impl
}

func newsqlite3(db *DB) *sqlite3DB {
	return &sqlite3DB{
		db: db,
		sqlite3Impl: &sqlite3Impl{
			db:     db,
			driver: db.DB,
		},
	}
}

func (obj *sqlite3DB) Schema() string {
	return `CREATE TABLE groups (
	pk INTEGER NOT NULL,
	uuid TEXT NOT NULL,
	created TIMESTAMP NOT NULL,
	name TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( uuid ),
	UNIQUE ( name )
);
CREATE TABLE users (
	pk INTEGER NOT NULL,
	uuid TEXT NOT NULL,
	created TIMESTAMP NOT NULL,
	id TEXT NOT NULL,
	first_name TEXT NOT NULL,
	last_name TEXT NOT NULL,
	PRIMARY KEY ( pk ),
	UNIQUE ( uuid ),
	UNIQUE ( id )
);
CREATE TABLE memberships (
	pk INTEGER NOT NULL,
	created TIMESTAMP NOT NULL,
	user_pk INTEGER NOT NULL REFERENCES users( pk ) ON DELETE CASCADE,
	group_pk INTEGER NOT NULL REFERENCES groups( pk ) ON DELETE CASCADE,
	PRIMARY KEY ( pk ),
	UNIQUE ( user_pk, group_pk )
);`
}

func (obj *sqlite3DB) wrapTx(tx *sql.Tx) txMethods {
	return &sqlite3Tx{
		dialectTx: dialectTx{tx: tx},
		sqlite3Impl: &sqlite3Impl{
			db:     obj.db,
			driver: tx,
		},
	}
}

type sqlite3Tx struct {
	dialectTx
	*sqlite3Impl
}

func sqlite3LogStmt(stmt string, args ...interface{}) {
	// TODO: render placeholders
	if Logger != nil {
		out := fmt.Sprintf("stmt: %s\nargs: %v\n", stmt, pretty(args))
		Logger(out)
	}
}

type pretty []interface{}

func (p pretty) Format(f fmt.State, c rune) {
	fmt.Fprint(f, "[")
nextval:
	for i, val := range p {
		if i > 0 {
			fmt.Fprint(f, ", ")
		}
		rv := reflect.ValueOf(val)
		if rv.Kind() == reflect.Ptr {
			if rv.IsNil() {
				fmt.Fprint(f, "NULL")
				continue
			}
			val = rv.Elem().Interface()
		}
		switch v := val.(type) {
		case string:
			fmt.Fprintf(f, "%q", v)
		case time.Time:
			fmt.Fprintf(f, "%s", v.Format(time.RFC3339Nano))
		case []byte:
			for _, b := range v {
				if !unicode.IsPrint(rune(b)) {
					fmt.Fprintf(f, "%#x", v)
					continue nextval
				}
			}
			fmt.Fprintf(f, "%q", v)
		default:
			fmt.Fprintf(f, "%v", v)
		}
	}
	fmt.Fprint(f, "]")
}

type Group struct {
	Pk      int64
	Uuid    string
	Created time.Time
	Name    string
}

func (Group) _Table() string { return "groups" }

type Group_Update_Fields struct {
}

type Group_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Group_Pk(v int64) Group_Pk_Field {
	return Group_Pk_Field{_set: true, _value: v}
}

func (f Group_Pk_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Group_Pk_Field) _Column() string { return "pk" }

type Group_Uuid_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Group_Uuid(v string) Group_Uuid_Field {
	return Group_Uuid_Field{_set: true, _value: v}
}

func (f Group_Uuid_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Group_Uuid_Field) _Column() string { return "uuid" }

type Group_Created_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Group_Created(v time.Time) Group_Created_Field {
	v = toUTC(v)
	return Group_Created_Field{_set: true, _value: v}
}

func (f Group_Created_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Group_Created_Field) _Column() string { return "created" }

type Group_Name_Field struct {
	_set   bool
	_null  bool
	_value string
}

func Group_Name(v string) Group_Name_Field {
	return Group_Name_Field{_set: true, _value: v}
}

func (f Group_Name_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Group_Name_Field) _Column() string { return "name" }

type User struct {
	Pk        int64
	Uuid      string
	Created   time.Time
	Id        string
	FirstName string
	LastName  string
}

func (User) _Table() string { return "users" }

type User_Update_Fields struct {
	Id        User_Id_Field
	FirstName User_FirstName_Field
	LastName  User_LastName_Field
}

type User_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func User_Pk(v int64) User_Pk_Field {
	return User_Pk_Field{_set: true, _value: v}
}

func (f User_Pk_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_Pk_Field) _Column() string { return "pk" }

type User_Uuid_Field struct {
	_set   bool
	_null  bool
	_value string
}

func User_Uuid(v string) User_Uuid_Field {
	return User_Uuid_Field{_set: true, _value: v}
}

func (f User_Uuid_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_Uuid_Field) _Column() string { return "uuid" }

type User_Created_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func User_Created(v time.Time) User_Created_Field {
	v = toUTC(v)
	return User_Created_Field{_set: true, _value: v}
}

func (f User_Created_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_Created_Field) _Column() string { return "created" }

type User_Id_Field struct {
	_set   bool
	_null  bool
	_value string
}

func User_Id(v string) User_Id_Field {
	return User_Id_Field{_set: true, _value: v}
}

func (f User_Id_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_Id_Field) _Column() string { return "id" }

type User_FirstName_Field struct {
	_set   bool
	_null  bool
	_value string
}

func User_FirstName(v string) User_FirstName_Field {
	return User_FirstName_Field{_set: true, _value: v}
}

func (f User_FirstName_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_FirstName_Field) _Column() string { return "first_name" }

type User_LastName_Field struct {
	_set   bool
	_null  bool
	_value string
}

func User_LastName(v string) User_LastName_Field {
	return User_LastName_Field{_set: true, _value: v}
}

func (f User_LastName_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (User_LastName_Field) _Column() string { return "last_name" }

type Membership struct {
	Pk      int64
	Created time.Time
	UserPk  int64
	GroupPk int64
}

func (Membership) _Table() string { return "memberships" }

type Membership_Update_Fields struct {
}

type Membership_Pk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Membership_Pk(v int64) Membership_Pk_Field {
	return Membership_Pk_Field{_set: true, _value: v}
}

func (f Membership_Pk_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Membership_Pk_Field) _Column() string { return "pk" }

type Membership_Created_Field struct {
	_set   bool
	_null  bool
	_value time.Time
}

func Membership_Created(v time.Time) Membership_Created_Field {
	v = toUTC(v)
	return Membership_Created_Field{_set: true, _value: v}
}

func (f Membership_Created_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Membership_Created_Field) _Column() string { return "created" }

type Membership_UserPk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Membership_UserPk(v int64) Membership_UserPk_Field {
	return Membership_UserPk_Field{_set: true, _value: v}
}

func (f Membership_UserPk_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Membership_UserPk_Field) _Column() string { return "user_pk" }

type Membership_GroupPk_Field struct {
	_set   bool
	_null  bool
	_value int64
}

func Membership_GroupPk(v int64) Membership_GroupPk_Field {
	return Membership_GroupPk_Field{_set: true, _value: v}
}

func (f Membership_GroupPk_Field) value() interface{} {
	if !f._set || f._null {
		return nil
	}
	return f._value
}

func (Membership_GroupPk_Field) _Column() string { return "group_pk" }

func toUTC(t time.Time) time.Time {
	return t.UTC()
}

func toDate(t time.Time) time.Time {
	// keep up the minute portion so that translations between timezones will
	// continue to reflect properly.
	return t.Truncate(time.Minute)
}

//
// runtime support for building sql statements
//

type __sqlbundle_SQL interface {
	Render() string

	private()
}

type __sqlbundle_Dialect interface {
	Rebind(sql string) string
}

type __sqlbundle_RenderOp int

const (
	__sqlbundle_NoFlatten __sqlbundle_RenderOp = iota
	__sqlbundle_NoTerminate
)

func __sqlbundle_Render(dialect __sqlbundle_Dialect, sql __sqlbundle_SQL, ops ...__sqlbundle_RenderOp) string {
	out := sql.Render()

	flatten := true
	terminate := true
	for _, op := range ops {
		switch op {
		case __sqlbundle_NoFlatten:
			flatten = false
		case __sqlbundle_NoTerminate:
			terminate = false
		}
	}

	if flatten {
		out = __sqlbundle_flattenSQL(out)
	}
	if terminate {
		out += ";"
	}

	return dialect.Rebind(out)
}

func __sqlbundle_flattenSQL(x string) string {
	// trim whitespace from beginning and end
	s, e := 0, len(x)-1
	for s < len(x) && (x[s] == ' ' || x[s] == '\t' || x[s] == '\n') {
		s++
	}
	for s <= e && (x[e] == ' ' || x[e] == '\t' || x[e] == '\n') {
		e--
	}
	if s > e {
		return ""
	}
	x = x[s : e+1]

	// check for whitespace that needs fixing
	wasSpace := false
	for i := 0; i < len(x); i++ {
		r := x[i]
		justSpace := r == ' '
		if (wasSpace && justSpace) || r == '\t' || r == '\n' {
			// whitespace detected, start writing a new string
			var result strings.Builder
			result.Grow(len(x))
			if wasSpace {
				result.WriteString(x[:i-1])
			} else {
				result.WriteString(x[:i])
			}
			for p := i; p < len(x); p++ {
				for p < len(x) && (x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteByte(' ')

				start := p
				for p < len(x) && !(x[p] == ' ' || x[p] == '\t' || x[p] == '\n') {
					p++
				}
				result.WriteString(x[start:p])
			}

			return result.String()
		}
		wasSpace = justSpace
	}

	// no problematic whitespace found
	return x
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_postgres struct{}

func (p __sqlbundle_postgres) Rebind(sql string) string {
	out := make([]byte, 0, len(sql)+10)

	j := 1
	for i := 0; i < len(sql); i++ {
		ch := sql[i]
		if ch != '?' {
			out = append(out, ch)
			continue
		}

		out = append(out, '$')
		out = append(out, strconv.Itoa(j)...)
		j++
	}

	return string(out)
}

// this type is specially named to match up with the name returned by the
// dialect impl in the sql package.
type __sqlbundle_sqlite3 struct{}

func (s __sqlbundle_sqlite3) Rebind(sql string) string {
	return sql
}

type __sqlbundle_Literal string

func (__sqlbundle_Literal) private() {}

func (l __sqlbundle_Literal) Render() string { return string(l) }

type __sqlbundle_Literals struct {
	Join string
	SQLs []__sqlbundle_SQL
}

func (__sqlbundle_Literals) private() {}

func (l __sqlbundle_Literals) Render() string {
	var out bytes.Buffer

	first := true
	for _, sql := range l.SQLs {
		if sql == nil {
			continue
		}
		if !first {
			out.WriteString(l.Join)
		}
		first = false
		out.WriteString(sql.Render())
	}

	return out.String()
}

type __sqlbundle_Condition struct {
	// set at compile/embed time
	Name  string
	Left  string
	Equal bool
	Right string

	// set at runtime
	Null bool
}

func (*__sqlbundle_Condition) private() {}

func (c *__sqlbundle_Condition) Render() string {
	// TODO(jeff): maybe check if we can use placeholders instead of the
	// literal null: this would make the templates easier.

	switch {
	case c.Equal && c.Null:
		return c.Left + " is null"
	case c.Equal && !c.Null:
		return c.Left + " = " + c.Right
	case !c.Equal && c.Null:
		return c.Left + " is not null"
	case !c.Equal && !c.Null:
		return c.Left + " != " + c.Right
	default:
		panic("unhandled case")
	}
}

type __sqlbundle_Hole struct {
	// set at compiile/embed time
	Name string

	// set at runtime
	SQL __sqlbundle_SQL
}

func (*__sqlbundle_Hole) private() {}

func (h *__sqlbundle_Hole) Render() string { return h.SQL.Render() }

//
// end runtime support for building sql statements
//

func (obj *postgresImpl) Create_User(ctx context.Context,
	user_uuid User_Uuid_Field,
	user_id User_Id_Field,
	user_first_name User_FirstName_Field,
	user_last_name User_LastName_Field) (
	user *User, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__uuid_val := user_uuid.value()
	__created_val := __now.UTC()
	__id_val := user_id.value()
	__first_name_val := user_first_name.value()
	__last_name_val := user_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO users ( uuid, created, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? ) RETURNING users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __uuid_val, __created_val, __id_val, __first_name_val, __last_name_val)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __uuid_val, __created_val, __id_val, __first_name_val, __last_name_val).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *postgresImpl) Create_Group(ctx context.Context,
	group_uuid Group_Uuid_Field,
	group_name Group_Name_Field) (
	group *Group, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__uuid_val := group_uuid.value()
	__created_val := __now.UTC()
	__name_val := group_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO groups ( uuid, created, name ) VALUES ( ?, ?, ? ) RETURNING groups.pk, groups.uuid, groups.created, groups.name")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __uuid_val, __created_val, __name_val)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, __uuid_val, __created_val, __name_val).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *postgresImpl) Create_Membership(ctx context.Context,
	membership_user_pk Membership_UserPk_Field,
	membership_group_pk Membership_GroupPk_Field) (
	membership *Membership, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_val := __now.UTC()
	__user_pk_val := membership_user_pk.value()
	__group_pk_val := membership_group_pk.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO memberships ( created, user_pk, group_pk ) VALUES ( ?, ?, ? ) RETURNING memberships.pk, memberships.created, memberships.user_pk, memberships.group_pk")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_val, __user_pk_val, __group_pk_val)

	membership = &Membership{}
	err = obj.driver.QueryRow(__stmt, __created_val, __user_pk_val, __group_pk_val).Scan(&membership.Pk, &membership.Created, &membership.UserPk, &membership.GroupPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return membership, nil

}

func (obj *postgresImpl) Find_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *postgresImpl) Get_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *postgresImpl) Paged_User(ctx context.Context,
	limit int, ctoken string) (
	rows []*User, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name, users.pk FROM users WHERE users.pk > ? ORDER BY users.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		user := &User{}
		err = __rows.Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, user)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *postgresImpl) Has_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM groups WHERE groups.name = ? )")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *postgresImpl) Find_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *postgresImpl) Get_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *postgresImpl) Paged_Group(ctx context.Context,
	limit int, ctoken string) (
	rows []*Group, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name, groups.pk FROM groups WHERE groups.pk > ? ORDER BY groups.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		group := &Group{}
		err = __rows.Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, group)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *postgresImpl) All_User_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	rows []*User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users  JOIN memberships ON users.pk = memberships.user_pk  JOIN groups ON memberships.group_pk = groups.pk WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		user := &User{}
		err = __rows.Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, user)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) All_Group_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	rows []*Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups  JOIN memberships ON groups.pk = memberships.group_pk  JOIN users ON memberships.user_pk = users.pk WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		group := &Group{}
		err = __rows.Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, group)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *postgresImpl) Update_User_By_Id(ctx context.Context,
	user_id User_Id_Field,
	update User_Update_Fields) (
	user *User, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE users SET "), __sets, __sqlbundle_Literal(" WHERE users.id = ? RETURNING users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Id._set {
		__values = append(__values, update.Id.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("id = ?"))
	}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, user_id.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil
}

func (obj *postgresImpl) Delete_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	deleted bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return false, obj.makeErr(err)
	}

	__count, err := __res.RowsAffected()
	if err != nil {
		return false, obj.makeErr(err)
	}

	return __count > 0, nil

}

func (obj *postgresImpl) Delete_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	deleted bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return false, obj.makeErr(err)
	}

	__count, err := __res.RowsAffected()
	if err != nil {
		return false, obj.makeErr(err)
	}

	return __count > 0, nil

}

func (obj *postgresImpl) Delete_Membership_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM memberships WHERE memberships.pk IN (SELECT memberships.pk FROM memberships  JOIN users ON memberships.user_pk = users.pk WHERE users.id = ?)")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (obj *postgresImpl) Delete_Membership_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM memberships WHERE memberships.pk IN (SELECT memberships.pk FROM memberships  JOIN groups ON memberships.group_pk = groups.pk WHERE groups.name = ?)")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (impl postgresImpl) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(*pq.Error); ok {
		if e.Code.Class() == "23" {
			return e.Constraint, true
		}
	}
	return "", false
}

func (obj *postgresImpl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.Exec("DELETE FROM memberships;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM users;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM groups;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

func (obj *sqlite3Impl) Create_User(ctx context.Context,
	user_uuid User_Uuid_Field,
	user_id User_Id_Field,
	user_first_name User_FirstName_Field,
	user_last_name User_LastName_Field) (
	user *User, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__uuid_val := user_uuid.value()
	__created_val := __now.UTC()
	__id_val := user_id.value()
	__first_name_val := user_first_name.value()
	__last_name_val := user_last_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO users ( uuid, created, id, first_name, last_name ) VALUES ( ?, ?, ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __uuid_val, __created_val, __id_val, __first_name_val, __last_name_val)

	__res, err := obj.driver.Exec(__stmt, __uuid_val, __created_val, __id_val, __first_name_val, __last_name_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastUser(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Group(ctx context.Context,
	group_uuid Group_Uuid_Field,
	group_name Group_Name_Field) (
	group *Group, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__uuid_val := group_uuid.value()
	__created_val := __now.UTC()
	__name_val := group_name.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO groups ( uuid, created, name ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __uuid_val, __created_val, __name_val)

	__res, err := obj.driver.Exec(__stmt, __uuid_val, __created_val, __name_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastGroup(ctx, __pk)

}

func (obj *sqlite3Impl) Create_Membership(ctx context.Context,
	membership_user_pk Membership_UserPk_Field,
	membership_group_pk Membership_GroupPk_Field) (
	membership *Membership, err error) {

	__now := obj.db.Hooks.Now().UTC()
	__created_val := __now.UTC()
	__user_pk_val := membership_user_pk.value()
	__group_pk_val := membership_group_pk.value()

	var __embed_stmt = __sqlbundle_Literal("INSERT INTO memberships ( created, user_pk, group_pk ) VALUES ( ?, ?, ? )")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __created_val, __user_pk_val, __group_pk_val)

	__res, err := obj.driver.Exec(__stmt, __created_val, __user_pk_val, __group_pk_val)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	__pk, err := __res.LastInsertId()
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return obj.getLastMembership(ctx, __pk)

}

func (obj *sqlite3Impl) Find_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *sqlite3Impl) Get_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *sqlite3Impl) Paged_User(ctx context.Context,
	limit int, ctoken string) (
	rows []*User, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name, users.pk FROM users WHERE users.pk > ? ORDER BY users.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		user := &User{}
		err = __rows.Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, user)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *sqlite3Impl) Has_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	has bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT EXISTS( SELECT 1 FROM groups WHERE groups.name = ? )")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	err = obj.driver.QueryRow(__stmt, __values...).Scan(&has)
	if err != nil {
		return false, obj.makeErr(err)
	}
	return has, nil

}

func (obj *sqlite3Impl) Find_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *sqlite3Impl) Get_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, __values...).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *sqlite3Impl) Paged_Group(ctx context.Context,
	limit int, ctoken string) (
	rows []*Group, ctokenout string, err error) {

	if ctoken == "" {
		ctoken = "0"
	}

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name, groups.pk FROM groups WHERE groups.pk > ? ORDER BY groups.pk LIMIT ?")

	var __values []interface{}
	__values = append(__values)

	__values = append(__values, ctoken, limit)

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, "", obj.makeErr(err)
	}
	defer __rows.Close()

	__pk := int64(0)
	for __rows.Next() {
		group := &Group{}
		err = __rows.Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name, &__pk)
		if err != nil {
			return nil, "", obj.makeErr(err)
		}
		rows = append(rows, group)
	}
	if err := __rows.Err(); err != nil {
		return nil, "", obj.makeErr(err)
	}

	if limit > 0 {
		if len(rows) == limit {
			ctokenout = fmt.Sprint(__pk)
		}
	} else {
		ctokenout = ctoken
	}

	return rows, ctokenout, nil

}

func (obj *sqlite3Impl) All_User_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	rows []*User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users  JOIN memberships ON users.pk = memberships.user_pk  JOIN groups ON memberships.group_pk = groups.pk WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		user := &User{}
		err = __rows.Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, user)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) All_Group_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	rows []*Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups  JOIN memberships ON groups.pk = memberships.group_pk  JOIN users ON memberships.user_pk = users.pk WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__rows, err := obj.driver.Query(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	defer __rows.Close()

	for __rows.Next() {
		group := &Group{}
		err = __rows.Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
		if err != nil {
			return nil, obj.makeErr(err)
		}
		rows = append(rows, group)
	}
	if err := __rows.Err(); err != nil {
		return nil, obj.makeErr(err)
	}
	return rows, nil

}

func (obj *sqlite3Impl) Update_User_By_Id(ctx context.Context,
	user_id User_Id_Field,
	update User_Update_Fields) (
	user *User, err error) {
	var __sets = &__sqlbundle_Hole{}

	var __embed_stmt = __sqlbundle_Literals{Join: "", SQLs: []__sqlbundle_SQL{__sqlbundle_Literal("UPDATE users SET "), __sets, __sqlbundle_Literal(" WHERE users.id = ?")}}

	__sets_sql := __sqlbundle_Literals{Join: ", "}
	var __values []interface{}
	var __args []interface{}

	if update.Id._set {
		__values = append(__values, update.Id.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("id = ?"))
	}

	if update.FirstName._set {
		__values = append(__values, update.FirstName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("first_name = ?"))
	}

	if update.LastName._set {
		__values = append(__values, update.LastName.value())
		__sets_sql.SQLs = append(__sets_sql.SQLs, __sqlbundle_Literal("last_name = ?"))
	}

	if len(__sets_sql.SQLs) == 0 {
		return nil, emptyUpdate()
	}

	__args = append(__args, user_id.value())

	__values = append(__values, __args...)
	__sets.SQL = __sets_sql

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	user = &User{}
	_, err = obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return nil, obj.makeErr(err)
	}

	var __embed_stmt_get = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE users.id = ?")

	var __stmt_get = __sqlbundle_Render(obj.dialect, __embed_stmt_get)
	obj.logStmt("(IMPLIED) "+__stmt_get, __args...)

	err = obj.driver.QueryRow(__stmt_get, __args...).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err == sql.ErrNoRows {
		return nil, nil
	}
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil
}

func (obj *sqlite3Impl) Delete_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	deleted bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM users WHERE users.id = ?")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return false, obj.makeErr(err)
	}

	__count, err := __res.RowsAffected()
	if err != nil {
		return false, obj.makeErr(err)
	}

	return __count > 0, nil

}

func (obj *sqlite3Impl) Delete_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	deleted bool, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM groups WHERE groups.name = ?")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return false, obj.makeErr(err)
	}

	__count, err := __res.RowsAffected()
	if err != nil {
		return false, obj.makeErr(err)
	}

	return __count > 0, nil

}

func (obj *sqlite3Impl) Delete_Membership_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM memberships WHERE memberships.pk IN (SELECT memberships.pk FROM memberships  JOIN users ON memberships.user_pk = users.pk WHERE users.id = ?)")

	var __values []interface{}
	__values = append(__values, user_id.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (obj *sqlite3Impl) Delete_Membership_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	count int64, err error) {

	var __embed_stmt = __sqlbundle_Literal("DELETE FROM memberships WHERE memberships.pk IN (SELECT memberships.pk FROM memberships  JOIN groups ON memberships.group_pk = groups.pk WHERE groups.name = ?)")

	var __values []interface{}
	__values = append(__values, group_name.value())

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, __values...)

	__res, err := obj.driver.Exec(__stmt, __values...)
	if err != nil {
		return 0, obj.makeErr(err)
	}

	count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}

	return count, nil

}

func (obj *sqlite3Impl) getLastUser(ctx context.Context,
	pk int64) (
	user *User, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT users.pk, users.uuid, users.created, users.id, users.first_name, users.last_name FROM users WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	user = &User{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&user.Pk, &user.Uuid, &user.Created, &user.Id, &user.FirstName, &user.LastName)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return user, nil

}

func (obj *sqlite3Impl) getLastGroup(ctx context.Context,
	pk int64) (
	group *Group, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT groups.pk, groups.uuid, groups.created, groups.name FROM groups WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	group = &Group{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&group.Pk, &group.Uuid, &group.Created, &group.Name)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return group, nil

}

func (obj *sqlite3Impl) getLastMembership(ctx context.Context,
	pk int64) (
	membership *Membership, err error) {

	var __embed_stmt = __sqlbundle_Literal("SELECT memberships.pk, memberships.created, memberships.user_pk, memberships.group_pk FROM memberships WHERE _rowid_ = ?")

	var __stmt = __sqlbundle_Render(obj.dialect, __embed_stmt)
	obj.logStmt(__stmt, pk)

	membership = &Membership{}
	err = obj.driver.QueryRow(__stmt, pk).Scan(&membership.Pk, &membership.Created, &membership.UserPk, &membership.GroupPk)
	if err != nil {
		return nil, obj.makeErr(err)
	}
	return membership, nil

}

func (impl sqlite3Impl) isConstraintError(err error) (
	constraint string, ok bool) {
	if e, ok := err.(sqlite3.Error); ok {
		if e.Code == sqlite3.ErrConstraint {
			msg := err.Error()
			colon := strings.LastIndex(msg, ":")
			if colon != -1 {
				return strings.TrimSpace(msg[colon:]), true
			}
			return "", true
		}
	}
	return "", false
}

func (obj *sqlite3Impl) deleteAll(ctx context.Context) (count int64, err error) {
	var __res sql.Result
	var __count int64
	__res, err = obj.driver.Exec("DELETE FROM memberships;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM users;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count
	__res, err = obj.driver.Exec("DELETE FROM groups;")
	if err != nil {
		return 0, obj.makeErr(err)
	}

	__count, err = __res.RowsAffected()
	if err != nil {
		return 0, obj.makeErr(err)
	}
	count += __count

	return count, nil

}

type Rx struct {
	db *DB
	tx *Tx
}

func (rx *Rx) UnsafeTx(ctx context.Context) (unsafe_tx *sql.Tx, err error) {
	tx, err := rx.getTx(ctx)
	if err != nil {
		return nil, err
	}
	return tx.Tx, nil
}

func (rx *Rx) getTx(ctx context.Context) (tx *Tx, err error) {
	if rx.tx == nil {
		if rx.tx, err = rx.db.Open(ctx); err != nil {
			return nil, err
		}
	}
	return rx.tx, nil
}

func (rx *Rx) Rebind(s string) string {
	return rx.db.Rebind(s)
}

func (rx *Rx) Commit() (err error) {
	if rx.tx != nil {
		err = rx.tx.Commit()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) Rollback() (err error) {
	if rx.tx != nil {
		err = rx.tx.Rollback()
		rx.tx = nil
	}
	return err
}

func (rx *Rx) All_Group_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	rows []*Group, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_Group_By_User_Id(ctx, user_id)
}

func (rx *Rx) All_User_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	rows []*User, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.All_User_By_Group_Name(ctx, group_name)
}

func (rx *Rx) Create_Group(ctx context.Context,
	group_uuid Group_Uuid_Field,
	group_name Group_Name_Field) (
	group *Group, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Group(ctx, group_uuid, group_name)

}

func (rx *Rx) Create_Membership(ctx context.Context,
	membership_user_pk Membership_UserPk_Field,
	membership_group_pk Membership_GroupPk_Field) (
	membership *Membership, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_Membership(ctx, membership_user_pk, membership_group_pk)

}

func (rx *Rx) Create_User(ctx context.Context,
	user_uuid User_Uuid_Field,
	user_id User_Id_Field,
	user_first_name User_FirstName_Field,
	user_last_name User_LastName_Field) (
	user *User, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Create_User(ctx, user_uuid, user_id, user_first_name, user_last_name)

}

func (rx *Rx) Delete_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	deleted bool, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Delete_Group_By_Name(ctx, group_name)
}

func (rx *Rx) Delete_Membership_By_Group_Name(ctx context.Context,
	group_name Group_Name_Field) (
	count int64, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Delete_Membership_By_Group_Name(ctx, group_name)

}

func (rx *Rx) Delete_Membership_By_User_Id(ctx context.Context,
	user_id User_Id_Field) (
	count int64, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Delete_Membership_By_User_Id(ctx, user_id)

}

func (rx *Rx) Delete_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	deleted bool, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Delete_User_By_Id(ctx, user_id)
}

func (rx *Rx) Find_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Find_Group_By_Name(ctx, group_name)
}

func (rx *Rx) Find_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Find_User_By_Id(ctx, user_id)
}

func (rx *Rx) Get_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	group *Group, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_Group_By_Name(ctx, group_name)
}

func (rx *Rx) Get_User_By_Id(ctx context.Context,
	user_id User_Id_Field) (
	user *User, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Get_User_By_Id(ctx, user_id)
}

func (rx *Rx) Has_Group_By_Name(ctx context.Context,
	group_name Group_Name_Field) (
	has bool, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Has_Group_By_Name(ctx, group_name)
}

func (rx *Rx) Paged_Group(ctx context.Context,
	limit int, ctoken string) (
	rows []*Group, ctokenout string, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Paged_Group(ctx, limit, ctoken)
}

func (rx *Rx) Paged_User(ctx context.Context,
	limit int, ctoken string) (
	rows []*User, ctokenout string, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Paged_User(ctx, limit, ctoken)
}

func (rx *Rx) Update_User_By_Id(ctx context.Context,
	user_id User_Id_Field,
	update User_Update_Fields) (
	user *User, err error) {
	var tx *Tx
	if tx, err = rx.getTx(ctx); err != nil {
		return
	}
	return tx.Update_User_By_Id(ctx, user_id, update)
}

type Methods interface {
	All_Group_By_User_Id(ctx context.Context,
		user_id User_Id_Field) (
		rows []*Group, err error)

	All_User_By_Group_Name(ctx context.Context,
		group_name Group_Name_Field) (
		rows []*User, err error)

	Create_Group(ctx context.Context,
		group_uuid Group_Uuid_Field,
		group_name Group_Name_Field) (
		group *Group, err error)

	Create_Membership(ctx context.Context,
		membership_user_pk Membership_UserPk_Field,
		membership_group_pk Membership_GroupPk_Field) (
		membership *Membership, err error)

	Create_User(ctx context.Context,
		user_uuid User_Uuid_Field,
		user_id User_Id_Field,
		user_first_name User_FirstName_Field,
		user_last_name User_LastName_Field) (
		user *User, err error)

	Delete_Group_By_Name(ctx context.Context,
		group_name Group_Name_Field) (
		deleted bool, err error)

	Delete_Membership_By_Group_Name(ctx context.Context,
		group_name Group_Name_Field) (
		count int64, err error)

	Delete_Membership_By_User_Id(ctx context.Context,
		user_id User_Id_Field) (
		count int64, err error)

	Delete_User_By_Id(ctx context.Context,
		user_id User_Id_Field) (
		deleted bool, err error)

	Find_Group_By_Name(ctx context.Context,
		group_name Group_Name_Field) (
		group *Group, err error)

	Find_User_By_Id(ctx context.Context,
		user_id User_Id_Field) (
		user *User, err error)

	Get_Group_By_Name(ctx context.Context,
		group_name Group_Name_Field) (
		group *Group, err error)

	Get_User_By_Id(ctx context.Context,
		user_id User_Id_Field) (
		user *User, err error)

	Has_Group_By_Name(ctx context.Context,
		group_name Group_Name_Field) (
		has bool, err error)

	Paged_Group(ctx context.Context,
		limit int, ctoken string) (
		rows []*Group, ctokenout string, err error)

	Paged_User(ctx context.Context,
		limit int, ctoken string) (
		rows []*User, ctokenout string, err error)

	Update_User_By_Id(ctx context.Context,
		user_id User_Id_Field,
		update User_Update_Fields) (
		user *User, err error)
}

type TxMethods interface {
	Methods

	Rebind(s string) string
	Commit() error
	Rollback() error
}

type txMethods interface {
	TxMethods

	deleteAll(ctx context.Context) (int64, error)
	makeErr(err error) error
}

type DBMethods interface {
	Methods

	Schema() string
	Rebind(sql string) string
}

type dbMethods interface {
	DBMethods

	wrapTx(tx *sql.Tx) txMethods
	makeErr(err error) error
}

func openpostgres(source string) (*sql.DB, error) {
	return sql.Open("postgres", source)
}

var sqlite3DriverName = func() string {
	var id [16]byte
	rand.Read(id[:])
	return fmt.Sprintf("sqlite3_%x", string(id[:]))
}()

func init() {
	sql.Register(sqlite3DriverName, &sqlite3.SQLiteDriver{
		ConnectHook: sqlite3SetupConn,
	})
}

// SQLite3JournalMode controls the journal_mode pragma for all new connections.
// Since it is read without a mutex, it must be changed to the value you want
// before any Open calls.
var SQLite3JournalMode = "WAL"

func sqlite3SetupConn(conn *sqlite3.SQLiteConn) (err error) {
	_, err = conn.Exec("PRAGMA foreign_keys = ON", nil)
	if err != nil {
		return makeErr(err)
	}
	_, err = conn.Exec("PRAGMA journal_mode = "+SQLite3JournalMode, nil)
	if err != nil {
		return makeErr(err)
	}
	return nil
}

func opensqlite3(source string) (*sql.DB, error) {
	return sql.Open(sqlite3DriverName, source)
}
